// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders   Order[]
  reviews  Review[]
  cart     Cart?
  address  Address[]

  @@map("users")
}

// Product model for store items
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal
  images      String[]
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

// Category model for product organization
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Order model for purchases
model Order {
  id        String   @id @default(cuid())
  status    OrderStatus @default(PENDING)
  total     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  @@map("orders")
}

// OrderItem model for items in an order
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("order_items")
}

// Review model for product reviews
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("reviews")
}

// Cart model for shopping cart
model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  items     CartItem[]

  @@map("carts")
}

// CartItem model for items in a cart
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("cart_items")
}

// Address model for user addresses
model Address {
  id           String   @id @default(cuid())
  street       String
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  orders       Order[]

  @@map("addresses")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
